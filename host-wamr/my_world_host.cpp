// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!
#include "my_world_cpp_host.h"
#include <assert.h>
#include <wasm_c_api.h>
#include <wasm_export.h> // wasm-micro-runtime header

template <class R> std::map<int32_t, R> wit::ResourceTable<R>::resources;
#include <assert.h>
extern "C" __attribute__((import_module("test:example/my-interface")))
__attribute__((import_name("[dtor]my-object"))) void
    testX3AexampleX2Fmy_interfaceX00X5BdtorX5Dmy_object(int32_t);
static void testX3AexampleX2Fmy_interfaceX00X5Bresource_dropX5Dmy_object(
    wasm_exec_env_t exec_env, int32_t arg0) {
  auto ptr = test::example::my_interface::MyObject::remove_resource(arg0);
  assert(ptr.has_value());
  test::example::my_interface::MyObject::Dtor(*ptr);
}
static int32_t testX3AexampleX2Fmy_interfaceX00X5BconstructorX5Dmy_object(
    wasm_exec_env_t exec_env, int32_t arg0) {
  auto result0 =
      test::example::my_interface::MyObject::New(exec_env, (uint32_t(arg0)));
  return result0.release()->get_handle();
}
static void testX3AexampleX2Fmy_interfaceX00X5BmethodX5Dmy_objectX2Eset(
    wasm_exec_env_t exec_env, int32_t arg0, int32_t arg1) {
  (**test::example::my_interface::MyObject::lookup_resource(arg0))
      .Set((uint32_t(arg1)));
}
static int32_t testX3AexampleX2Fmy_interfaceX00X5BmethodX5Dmy_objectX2Eget(
    wasm_exec_env_t exec_env, int32_t arg0) {
  auto result0 =
      (**test::example::my_interface::MyObject::lookup_resource(arg0)).Get();
  return (int32_t(result0));
}
exports::test::example::my_interface::MyObject::~MyObject() {
  if (this->rep) {
    wasm_function_inst_t wasm_func = wasm_runtime_lookup_function(
        wasm_runtime_get_module_inst(exec_env),
        "test:example/my-interface#[dtor]my-object");
    wasm_val_t *wasm_results = nullptr;
    wasm_val_t wasm_args[1] = {
        WASM_I32_VAL((int32_t)(*this).get_rep()),
    };
    bool wasm_ok = wasm_runtime_call_wasm_a(exec_env, wasm_func, 0, wasm_results,
                                            1, wasm_args);
    assert(wasm_ok);
  }
}
exports::test::example::my_interface::MyObject::MyObject(
    wasm_exec_env_t _exec_env, uint32_t a) : exec_env(_exec_env) {
  wasm_function_inst_t wasm_func = wasm_runtime_lookup_function(
      wasm_runtime_get_module_inst(exec_env),
      "test:example/my-interface#[constructor]my-object");
  wasm_val_t wasm_results[1] = {WASM_INIT_VAL};
  wasm_val_t wasm_args[1] = {
      WASM_I32_VAL((int32_t(a))),
  };
  bool wasm_ok = wasm_runtime_call_wasm_a(exec_env, wasm_func, 1, wasm_results,
                                          1, wasm_args);
  assert(wasm_ok);
  assert(wasm_results[0].kind == WASM_I32);
  auto ret = wasm_results[0].of.i32;
  this->index = wit::ResourceExportBase{ret}.get_handle();
  this->rep = *lookup_resource(ret);
}
void exports::test::example::my_interface::MyObject::Set(uint32_t v) const {
  wasm_function_inst_t wasm_func = wasm_runtime_lookup_function(
      wasm_runtime_get_module_inst(exec_env),
      "test:example/my-interface#[method]my-object.set");
  wasm_val_t *wasm_results = nullptr;
  wasm_val_t wasm_args[2] = {
      WASM_I32_VAL((int32_t)(*this).get_rep()),
      WASM_I32_VAL((int32_t(v))),
  };
  bool wasm_ok = wasm_runtime_call_wasm_a(exec_env, wasm_func, 0, wasm_results,
                                          2, wasm_args);
  assert(wasm_ok);
}
uint32_t exports::test::example::my_interface::MyObject::Get() const {
  wasm_function_inst_t wasm_func = wasm_runtime_lookup_function(
      wasm_runtime_get_module_inst(exec_env),
      "test:example/my-interface#[method]my-object.get");
  wasm_val_t wasm_results[1] = {WASM_INIT_VAL};
  wasm_val_t wasm_args[1] = {
      WASM_I32_VAL((int32_t)(*this).get_rep()),
  };
  bool wasm_ok = wasm_runtime_call_wasm_a(exec_env, wasm_func, 1, wasm_results,
                                          1, wasm_args);
  assert(wasm_ok);
  assert(wasm_results[0].kind == WASM_I32);
  auto ret = wasm_results[0].of.i32;
  return (uint32_t(ret));
}
exports::test::example::my_interface::MyObject::MyObject(wasm_exec_env_t _exec_env, 
    wit::ResourceExportBase &&b)
    : wit::ResourceExportBase(std::move(b)), exec_env(_exec_env) {}
static int32_t
X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_newX5Dmy_object(
    wasm_exec_env_t exec_env, int32_t arg0) {
  return exports::test::example::my_interface::MyObject::store_resource(
      std::move(arg0));
}
static int32_t
X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_repX5Dmy_object(
    wasm_exec_env_t exec_env, int32_t arg0) {
  return *exports::test::example::my_interface::MyObject::lookup_resource(arg0);
}
static void
X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_dropX5Dmy_object(
    wasm_exec_env_t exec_env, int32_t arg0) {
  exports::test::example::my_interface::MyObject::remove_resource(arg0);
}

// Component Adapters
void register_my_world() {
  static NativeSymbol test_example_my_interface_funs[] = {
      {"[resource-drop]my-object",
       (void *)testX3AexampleX2Fmy_interfaceX00X5Bresource_dropX5Dmy_object,
       "(i)", nullptr},
      {"[constructor]my-object",
       (void *)testX3AexampleX2Fmy_interfaceX00X5BconstructorX5Dmy_object,
       "(i)i", nullptr},
      {"[method]my-object.set",
       (void *)testX3AexampleX2Fmy_interfaceX00X5BmethodX5Dmy_objectX2Eset,
       "(ii)", nullptr},
      {"[method]my-object.get",
       (void *)testX3AexampleX2Fmy_interfaceX00X5BmethodX5Dmy_objectX2Eget,
       "(i)i", nullptr},
  };
  static NativeSymbol export_test_example_my_interface_funs[] = {
      {"[resource-new]my-object",
       (void *)
           X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_newX5Dmy_object,
       "(i)i", nullptr},
      {"[resource-rep]my-object",
       (void *)
           X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_repX5Dmy_object,
       "(i)*", nullptr},
      {"[resource-drop]my-object",
       (void *)
           X5BexportX5DtestX3AexampleX2Fmy_interfaceX00X5Bresource_dropX5Dmy_object,
       "(i)", nullptr},
  };
  wasm_runtime_register_natives(
      "test:example/my-interface", test_example_my_interface_funs,
      sizeof(test_example_my_interface_funs) / sizeof(NativeSymbol));
  wasm_runtime_register_natives("[export]test:example/my-interface",
                                export_test_example_my_interface_funs,
                                sizeof(export_test_example_my_interface_funs) /
                                    sizeof(NativeSymbol));
}
